// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IVRNPort {
    /** Structs */
    /**
     * Struct to store the Bool-specific information.
     * @param chainId Bool-defined ID of the local chain.
     * @param bId ID of the BLS-typed committee.
     * @param eId ID of the ECDSA-typed committee.
     * @param committee Address of the ECDSA-typed committee to guarantee the randomness reliability.
     */
    struct BoolInfo {
        uint256 chainId;
        uint256 bId;
        uint256 eId;
        address committee;
    }

    /**
     * Struct to represent the result of a random number request.
     * @param chainId Bool-defined ID of the local chain.
     * @param port Address of the VRNPort contract.
     * @param requester Address of the requester to use the corresponding VRN.
     * @param requestId The ID of the request.
     * @param randomNumber The random number generated by Bool Network.
     */
    struct RandomNumberFeed {
        uint256 chainId;
        address port;
        address requester;
        uint256 requestId;
        uint256 randomNumber;
    }

    /** Events */
    /**
     * @notice Emitted when a random number is requested.
     * @param requestId The request ID to be filled and consumed.
     * @param requester Address of the requester.
     * @param bId ID of the BLS-typed committee.
     * @param eId ID of the ECDSA-typed committee.
     * @param chainId Bool-defined ID of the local chain.
     */
    event RandomNumberRequested(
        uint256 requestId,
        address indexed requester,
        uint256 bId,
        uint256 eId,
        uint256 chainId
    );

    /**
     * @notice Emitted when a random number is received.
     * @param requestId The request ID to be filled and consumed.
     * @param requester Address of the requester.
     */
    event RandomNumberReceived(uint256 requestId, address indexed requester);

    /**
     * @notice Emitted when the fee is set.
     * @param fee The new fee.
     */
    event FeeUpdated(uint256 fee);

    /**
     * @notice Emitted when the fee receiver is set.
     * @param feeReceiver The new fee receiver.
     */
    event FeeReceiverUpdated(address feeReceiver);

    /**
     * @notice Requests a random number.
     * @return requestId The request ID to be filled and consumed.
     */
    function requestRandomNumber() external payable returns (uint256 requestId);

    /**
     * @notice Sets a random number for a given request ID.
     * @param feed The random number feed to verify.
     * @param signature The signature to verify.
     */
    function setRandomNumber(RandomNumberFeed calldata feed, bytes calldata signature) external;

    /** View/Pure Functions */

    /**
     * @notice Returns the fee.
     */
    function fee() external view returns (uint256);

    /**
     * @notice Returns the Bool-specific information.
     */
    function info() external view returns (BoolInfo memory);

    /**
     * @notice Returns the last request ID to generate a VRN.
     */
    function getRequestId() external view returns (uint256);

    /**
     * @notice Returns the random number for the given request ID.
     * @param requestId The request ID to query.
     */
    function getRandomNumber(uint256 requestId) external view returns (uint256);

    /**
     * @notice Validates the contents of the given random number feed.
     * @param feed The random number feed to validate.
     */
    function validateFeed(RandomNumberFeed calldata feed) external view;

    /**
     * @notice Verifies the signature of the given random number feed to check the authenticity.
     * @param feed The random number feed to verify.
     * @param signature The signature to verify.
     */
    function verifySignature(
        RandomNumberFeed calldata feed,
        bytes calldata signature
    ) external view returns (bool);
}
